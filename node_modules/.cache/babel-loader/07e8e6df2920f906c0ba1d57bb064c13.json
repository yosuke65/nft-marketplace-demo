{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Nav } from \"react-bootstrap\";\nimport KryptoBird from \"../abis/KryptoBird.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  console.log(\"ethereum wallet is connected\");\n                  window.Web3 = new Web3(provider);\n                } else {\n                  console.log(\"no ethereum wallet detected\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var accounts, networkId, networkData, abi, address, contract;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return window.Web3.eth.requestAccounts();\n\n              case 2:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts,\n                  contract: null\n                });\n                _context3.next = 6;\n                return window.ethereum.request({\n                  method: 'net_version'\n                });\n\n              case 6:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (networkData) {\n                  abi = KryptoBird.abi;\n                  address = networkData.address;\n                  contract = new Web3().eth.Contract(abi, address);\n                  console.log(contract);\n                } else {}\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.state.account)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/hawk2/Desktop/Web Projects/web3/nft-marketplace-demo/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","Nav","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","eth","requestAccounts","accounts","setState","account","contract","ethereum","request","method","networkId","networkData","networks","abi","address","Contract","props","state","color"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;;;;;;;;;;;;uBAEI,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIiBL,sBAAsB,E;;;AAAvCM,gBAAAA,Q;;AAEN,oBAAIA,QAAJ,EAAc;AACZC,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAC,kBAAAA,MAAM,CAACV,IAAP,GAAc,IAAIA,IAAJ,CAASO,QAAT,CAAd;AACD,iBAHD,MAGO;AACLC,kBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIsBC,MAAM,CAACV,IAAP,CAAYW,GAAZ,CAAgBC,eAAhB,E;;;AAAjBC,gBAAAA,Q;AACN,qBAAKC,QAAL,CAAc;AACZC,kBAAAA,OAAO,EAAEF,QADG;AAEZG,kBAAAA,QAAQ,EAAE;AAFE,iBAAd;;uBAKwBN,MAAM,CAACO,QAAP,CAAgBC,OAAhB,CAAyB;AAACC,kBAAAA,MAAM,EAAE;AAAT,iBAAzB,C;;;AAAlBC,gBAAAA,S;AACAC,gBAAAA,W,GAAclB,UAAU,CAACmB,QAAX,CAAoBF,SAApB,C;;AAEpB,oBAAGC,WAAH,EAAgB;AACRE,kBAAAA,GADQ,GACFpB,UAAU,CAACoB,GADT;AAERC,kBAAAA,OAFQ,GAEEH,WAAW,CAACG,OAFd;AAGRR,kBAAAA,QAHQ,GAGG,IAAIhB,IAAJ,GAAWW,GAAX,CAAec,QAAf,CAAwBF,GAAxB,EAA6BC,OAA7B,CAHH;AAIdhB,kBAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACD,iBALD,MAKO,CAEN;;;;;;;;;;;;;;;;;;AAGH,eAAYU,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXZ,MAAAA,OAAO,EAAE;AADE,KAAb;AAFiB;AAKlB;;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAC,qCADZ;AAEE,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAE;AAAT,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,EAOE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,kDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,KAAKD,KAAL,CAAWZ,OAA1C,CADF,CADF,CAPF,CADF,CADF;AAiBD;;;;EA9DehB,S;;AAiElB,eAAeK,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport { Nav } from \"react-bootstrap\";\nimport KryptoBird from \"../abis/KryptoBird.json\";\n\nclass App extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      console.log(\"ethereum wallet is connected\");\n      window.Web3 = new Web3(provider);\n    } else {\n      console.log(\"no ethereum wallet detected\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const accounts = await window.Web3.eth.requestAccounts();\n    this.setState({ \n      account: accounts,\n      contract: null\n    });\n\n    const networkId = await window.ethereum.request( {method: 'net_version'} );\n    const networkData = KryptoBird.networks[networkId];\n\n    if(networkData) {\n      const abi = KryptoBird.abi;\n      const address = networkData.address;\n      const contract = new Web3().eth.Contract(abi, address);\n      console.log(contract);\n    } else {\n\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <div\n            className=\"navbar-brand col-sm-3 col-md-3 mr-0\"\n            style={{ color: \"white\" }}\n          >\n            Krypto Birdz NFTs (Non Fungible Tokens)\n          </div>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\">{this.state.account}</small>\n            </li>\n          </ul>\n        </Nav>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}